libdsm.a - Maxim Dynamic Speaker Management Library
===================================================

[Dynamic Speaker Management]
More information about Dynamic Speaker Management could be found here:
https://www.maximintegrated.com/en/products/analog/audio/speaker-amplifiers/dynamic-speaker-management.html#:~:text=Dynamic%20Speaker%20Management%20(DSM%E2%84%A2,richer%20sound%20from%20micro%20speakers.
For technical support please visit here:
https://maximsupport.microsoftcrmportals.com/en-US/tech-support/

[Processor ISA]
configuration name : cavs2x_LX6HiFi3_2017_8
description : TGL DSP core configuration
Target HW Build ID : 443035
Target hardware version: LX6.0.3

[SOF dependency]
libdsm.a is standalone library and it does not have any depenency with SOF version.
No SOF header file was included for the library build.

[Library API Description]
/*******************************************************************************
 *    dsm_api_get_mem()
 *
 * Description:
 *     This function returns the size of data memory which is required by DSM module
 *     and must be called before any other DSM API functions.
 *     The DSP framework should be responsible for allocating memory for
 *     DSM module.
 *
 * Input:
 *     iparamsize: the size of the data structure dsm_api_memory_size_ext_t.
 *
 * Output:
 *     N/A
 *
 * I/O:
 *     iopMemParam: the address of data structure dsm_api_memory_size_ext_t
 *     which contains input and output arguments.
 *
 * Returns:
 *     DSM_API_OK: successful
 *     Otherwise:  error code
 *
 *******************************************************************************/
enum DSM_API_MESSAGE dsm_api_get_mem(struct dsm_api_memory_size_ext_t *iopmmemparam,
				     int iparamsize);

/*******************************************************************************
 *    dsm_api_init()
 *
 * Description:
 *     This function is used to initialize DSM module and must be called after
 *     dsm_api_get_mem() and before all other DSM API functions.
 *
 * Inputs:
 *     ipmodulehandler:
 *                  the handler of DSM module which is allocated by framework caller.
 *     iparamsize:  the size of the data structure dsm_api_init_ext_t.
 *
 * Outputs:
 *     N/A
 *
 * I/O:
 *     iopparamstruct: the address of a data structure dsm_api_init_ext_t
 *     which contains input and output arguments.
 *
 * Returns:
 *     DSM_API_OK: successful
 *     Otherwise:  error code
 *
 *******************************************************************************/
enum DSM_API_MESSAGE dsm_api_init(void *ipmodulehandler,
				  struct dsm_api_init_ext_t *iopparamstruct,
				  int iparamsize);

/*******************************************************************************
 *    dsm_api_ff_processs()
 *
 * Description:
 *     This function is used to process the input audio PCM DSM data.
 *
 * Inputs:
 *     ipmodulehandler:
 *                    the handler of DSM module which is allocated by framework caller.
 *     ichannelmask: the low 8-bits indicate which channels should be executed.
 *                  0: default channels setting, mono or stereo
 *                  1: L channel
 *                  2: R channel
 *                  3: L and R channels
 *                 -1: place input L channel onto output R channel
 *                 -2: place input R channel onto output L channel
 *                 -3: switch L and R channel
 *     ibufferorg:    the input buffer which contains 16-bit audio PCM input data.
 *                 The multi-channel input PCM data are ordered in the format below:
 *                 +-----------------------+    ...    +-------------------------+
 *                 |    one frame samples  |    ...    |   one frame samples     |
 *                 +-----------------------+    ...    +-------------------------+
 *                      1st channel             ...           N-th channel
 *
 * Outputs:
 *     obufferorg: the output buffer which contains the 16-bit PCM data processed by DSM.
 *		   The multi-channel output PCM data are ordered in the format below:
 *                 +-----------------------+    ...    +-------------------------+
 *                 |    one frame samples  |    ...    |   one frame samples     |
 *                 +-----------------------+    ...    +-------------------------+
 *                      1st channel             ...           N-th channel
 *     opnrsamples: the address of a variable which contains the number of samples
 *                  in output buffer.
 *
 * I/O:
 *     ipnrsamples: the number of audio PCM samples to be processed, in 32-bit
 *                   long integer.
 *                       The returned value indicates how many samples of input data are
 *                   not used in the input buffer. In this case, DSP framework should
 *                   send back the remaining data in next process.
 *
 * Returns:
 *     DSM_API_OK: successful
 *     Otherwise:  error codes
 *
 *******************************************************************************/
enum DSM_API_MESSAGE dsm_api_ff_process(void *ipmodulehandler,
					int channelmask,
					short *ibufferorg,
					int *ipnrsamples,
					short *obufferorg,
					int *opnrsamples);

/*******************************************************************************
 *    dsm_api_fb_processs()
 *
 * Description:
 *     This function is used to process current(I) and voltage(V) feedback data.
 *
 * Inputs:
 *     ipmodulehandler:
 *                    the handler of DSM module which is allocated by framework caller.
 *     ichannelmask:   the low 8-bits indicate which channels should be executed.
 *                  0: default channels setting, mono or stereo
 *                  1: L channel
 *                  2: R channel
 *                  3: L and R channels
 *                 -1: place input L channel onto output R channel
 *                 -2: place input R channel onto output L channel
 *                 -3: switch L and R channel
 *     icurrbuffer:   the input buffer which contains I data.
 *                 The multi-channel I data are ordered in the format below:
 *                 +-----------------------+    ...    +-------------------------+
 *                 |    one frame samples  |    ...    |   one frame samples     |
 *                 +-----------------------+    ...    +-------------------------+
 *                      1st channel             ...           N-th channel
 *     ivoltbuffer:   the input buffer which contains V data.
 *                 The multi-channel V data are ordered in the format below:
 *                 +-----------------------+    ...    +-------------------------+
 *                 |    one frame samples  |    ...    |   one frame samples     |
 *                 +-----------------------+    ...    +-------------------------+
 *                      1st channel             ...           N-th channel
 *
 * I/O:
 *     iopnrsamples:  the address of a variable which contains number of I/V data to
 *                    be processed.
 *                        The returned value indicates how many samples of I/V data are
 *                    not used in the I/V buffer. In this case, DSP framework should send
 *                    back the remaining I and V data in next process.
 *
 * Outputs:
 *     N/A
 *
 * Returns:
 *     DSM_API_OK: successful
 *     Otherwise:  error code
 *
 *******************************************************************************/
enum DSM_API_MESSAGE dsm_api_fb_process(void *ipmodulehandler,
					int ichannelmask,
					short *icurrbuffer,
					short *ivoltbuffer,
					int *iopnrsamples);

/*******************************************************************************
 *    dsm_api_set_params()
 *
 * Description:
 *     This function is used to set a serial of DSM parameters in one call.
 *
 * Inputs:
 *     ipmodulehandler:
 *               the handler of DSM module which is allocated by framework caller.
 *     icommandnumber:   the number of commands. The total memory size of this
 *               input argument
 *                    = (cmdNum * 2) * sizeof(int) bytes.
 *     ipparamsbuffer: the buffer of input parameters which are stored in the format below.
 *               The parameters should be set separately for each channel.
 *               ipValue memory map:
 *               ---+-----------+-------------------
 *                  |   cmd_1   |  32-bits integer command
 *                  +-----------+
 *                  |  param_1  |  32-bits data
 *               ---+-----------+-------------------
 *                  |    ...    |
 *                  |    ...    |
 *                  |    ...    |
 *               ---+-----------+-------------------
 *                  |   cmd_N   |  32-bits integer command
 *                  +-----------+
 *                  |  param_N  |  N-th 32-bit data
 *               ---+-----------+-------------------
 *            Total: N parameters
 *
 * Outputs:
 *     N/A.
 *
 * Returns:
 *     DSM_API_OK: successful
 *     Otherwise:  error code
 *
 *******************************************************************************/
enum DSM_API_MESSAGE dsm_api_set_params(void *ipmodulehandler,
					int icommandnumber, void *ipparamsbuffer);

/*******************************************************************************
 *    dsm_api_get_paramss()
 *
 * Description:
 *     This function is used to get a serial of DSM parameters in one call.
 *
 * Inputs:
 *     ipmodulehandler:
 *              the handler of DSM module which is allocated by framework caller.
 *     icommandnumber:   the number of parameters. The total memory size of this
 *               input argument
 *                    = cmdNum * (1 + channel_number) ) * sizeof(int) bytes
 *
 * Outputs:
 *     opparams: the buffer of the output parameters which are stored in the format below.
 *               opParams memory map:
 *             -----+-------------+-----------------------------
 *                  |    cmd_1    |  32-bits integer command Id
 *                  +-------------+
 *                  |  param_1_1  |  32-bits data of channel 1\
 *                  +-------------+                            \
 *                  +    ......   +                             -> parameters of N channels
 *                  +-------------+                            /
 *                  |  param_1_C  |  32-bits data of channel N/
 *             -----+-------------+-----------------------------
 *                  +    ......   +
 *                  +    ......   +
 *                  +    ......   +
 *             -----+-------------+-----------------------------
 *                  +    cmd_M    +  32-bits integer command Id
 *                  +-------------+
 *                  |  param_M_1  |  32-bits data of channel 1\
 *                  +-------------+                            \
 *                  +    ......   +                             -> parameters of N channels
 *                  +-------------+                            /
 *                  |  param_M_C  |  32-bits data of channel N/
 *             -----+-------------+------------------------------
 *            Total: M parameters of N channels
 *
 *               Exeption: the parameter sizes of the commands
 *		 DSM_API_GET_FIRMWARE_BUILD_TIME      = 88, //C string
 *		 DSM_API_GET_FIRMWARE_BUILD_DATE      = 89, //C string
 *		 DSM_API_GET_FIRMWARE_VERSION         = 90, //C string
 *		 DSM_API_GET_CHIPSET_MODEL            = 91, //C string
 *		 are DSM_MAX_STRING_PARAM_SIZE (=32) bytes rather than 4 bytes of
 *		 32-bits data because these parameters are in the format C string.
 *
 * Returns:
 *     DSM_API_OK: successful
 *     Otherwise:  error code
 *
 *******************************************************************************/
enum DSM_API_MESSAGE dsm_api_get_params(void *ipmodulehandler,
					int icommandnumber, void *opparams);
